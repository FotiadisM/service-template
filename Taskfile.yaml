version: "3"

tasks:
  help:
    desc: Display a summary of available tasks
    cmd: task -l

  build:
    desc: Build the application
    env:
      GOOS: linux
      CGO_ENABLED: 0
    cmds:
      - mkdir -p bin
      - go build -o ./bin/app ./cmd/book-svc

  fmt:
    desc: Format code
    deps:
      - go:fmt
      - buf:fmt
      - sql:fmt
      - config:fmt

  lint:
    desc: Lint code
    deps:
      - go:lint
      - buf:lint
      - sql:lint

  gen:
    desc: Generate code (protobuf files, DB schema structs, queries, and mocks)
    deps:
      - buf:gen
      - sql:gen

  test:
    desc: Run tests
    deps:
      - go:test

  go:fmt:
    desc: Format Go code
    cmds:
      - gofumpt -w .
      - goimports -local $(go list -m) -w .

  go:lint:
    desc: Lint Go code
    cmds:
      - go vet ./...
      - golangci-lint run

  go:test:
    desc: Test Go code
    vars:
      ARGS: '{{.CLI_ARGS| default "./..."}}'
    cmd: gotestsum -- -race -cover {{.ARGS}}

  go:test-watch:
    desc: Watch for file changes and run tests
    cmd: gotestsum --format testname --watch -- -race
    aliases:
      - test-watch

  buf:fmt:
    desc: Format protobuf files
    cmd: buf format -w

  buf:lint:
    desc: Lint protobuf files
    cmd: buf lint ./api/proto

  buf:gen:
    desc: Generate code from protobuf files
    cmds:
      - buf generate ./api/proto
      - task: go:fmt
      - task: config:fmt

  sql:fmt:
    desc: Format sql code
    cmds:
      - atlas schema fmt
      - sqlfluff format -d postgres --disable-progress-bar

  sql:lint:
    desc: Lint sql code
    cmd: atlas migrate lint --env local --latest 1

  sql:gen:
    desc: Generate DB schema structs and queries
    cmds:
      - task: sql:fmt
      - sqlc generate
      - task: mocks:gen

  sql:migrations:new:emtpy:
    desc: Create a new empty migration file
    aliases: [sql-new-empty]
    cmd: atlas migrate new {{.CLI_ARGS}}

  sql:migrations:new:from-schema:
    desc: Create a new migration file based on the schema diff
    aliases: [sql-new]
    cmds:
      - task: sql:fmt
      - for: ["postgres", "postgres-dev"]
        task: sql:db:reset
        vars:
          CONTAINER: "{{.ITEM}}"
      - atlas migrate diff --env local {{.CLI_ARGS}}
      - task: sql:fmt
      - task: sql:migrations:hash

  sql:migrations:apply:
    desc: Apply the migrations to the database
    aliases: [sql-apply]
    cmds:
      - for: ["postgres", "postgres-dev"]
        task: sql:db:reset
        vars:
          CONTAINER: "{{.ITEM}}"
      - atlas migrate apply --env local

  sql:migrations:hash:
    desc: Re-calculate atlas.sum after a manual migrations change
    aliases: [sql-hash]
    cmd: atlas migrate hash --env local

  sql:db:reset:
    silent: true
    internal: true
    desc: Drop and re-create the database
    cmds:
      - tilt disable service-template
      - kubectl exec -it statefulsets/{{.CONTAINER}} -- psql -q -U postgres -c "DROP DATABASE IF EXISTS $PSQL_DBNAME;"
      - kubectl exec -it statefulsets/{{.CONTAINER}} -- psql -q -U postgres -c "CREATE DATABASE $PSQL_DBNAME;"
      - tilt enable service-template

  mocks:gen:
    desc: Generate mocks
    cmd: mockery

  config:fmt:
    desc: Format config files
    cmd: prettier --write --log-level warn .
